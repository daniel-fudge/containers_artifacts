user name: 87262-78bb3-4@skillmeup.com
password: Password123!

Asure
Name:      Hacker One
User Name: hacker15do@msftopenhack7023ops.onmicrosoft.com
Password:  4Jr*(6kzr

SQLName: sqlserverefd3942.database.windows.net
Registry Name: registryefd3942
Resource Group: teamResources
Cluster Name: myManagedCluster
Key Vault Name: kv-oh42
http://13.64.22.129/


azureKeyvaultSecretsProvider
"client"Id": "4dc1b2a8-fda8-4afc-a880-2d7502808d05",
"objectId": "671fe750-122c-43bc-92bb-bbef60d8e25e",
"resourceId": "/subscriptions/6f05caef-84fb-4b9d-a2a8-e4df3386ecfb/resourcegroups/MC_teamResources_myManagedCluster_westus/providers/Microsoft.ManagedIdentity/userAssignedIdentities/azurekeyvaultsecretsprovider-mymanagedcluster"

kubectl apply -f poi.yml --namespace api
kubectl apply -f user-java.yml --namespace api
kubectl apply -f userprofile.yml --namespace api
kubectl apply -f trips.yml --namespace api
kubectl apply -f tripviewer.yml --namespace web

poi: 			Daniel
trips: 			Randy
tripviewer:	  	Charlie
java-user: 		Luca
user-profile: 	Al

		
************************************************************************************
Challenge 5
************************************************************************************

REGISTER AKS-AzureKeyVaultSecretsProvider preview feature
az feature register --namespace "Microsoft.ContainerService" --name "AKS-AzureKeyVaultSecretsProvider"
az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService/AKS-AzureKeyVaultSecretsProvider')].{Name:name,State:properties.state}"
az provider register --namespace Microsoft.ContainerService

INSTALL aks-preview CLI extension
az extension add --name aks-preview
az extension update --name aks-preview

UPGRADE CLUSTER with CSL Driver Support
az aks enable-addons --addons azure-keyvault-secrets-provider --name myManagedCluster --resource-group teamResources
kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver, secrets-store-provider-azure)'

CREATE AZURE KEY VAULT
az keyvault create -n kv-oh42 -g teamResources -l westus

az keyvault secret set --vault-name kv-oh42 -n SQLSERVER   --value sqlserverefd3942.database.windows.net
az keyvault secret set --vault-name kv-oh42 -n SQLUSER     --value sqladmineFd3942
az keyvault secret set --vault-name kv-oh42 -n SQLPASSWORD --value 'dL4jp2Ip7'
az keyvault secret set --vault-name kv-oh42 -n SQLDBNAME   --value mydrivingDB

az keyvault set-policy -n kv-oh42 --secret-permissions get --spn 4dc1b2a8-fda8-4afc-a880-2d7502808d05

az aks pod-identity list --cluster-name myManagedCluster --resource-group teamResources
kubectl apply -f secret.yml --namespace api

CREATE NGINX Controler
NAMESPACE=ingress-basic
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install ingress-nginx ingress-nginx/ingress-nginx --create-namespace --namespace $NAMESPACE
kubectl --namespace ingress-basic get services -o wide -w ingress-nginx-controller

kubectl apply -f route-web.yml --namespace web
kubectl apply -f route-api.yml --namespace api


************************************************************************************
Challenge 4
************************************************************************************

SETUP Azure AD
# Create an Azure AD group
az ad group create --display-name myAKSAdminGroup

# Create an AKS-managed Azure AD cluster
Done in Web Portal
Name:  myManagedCluster
  
az aks get-credentials --resource-group teamResources --name myManagedCluster --overwrite-existing
az aks update -n myManagedCluster -g teamResources --attach-acr registryefd3942
kubectl create namespace web
kubectl create namespace api

kubectl create secret generic sql-info --namespace api \
  --from-literal=SQL_SERVER=sqlserverefd3942.database.windows.net \
  --from-literal=SQL_USER=sqladmineFd3942 \
  --from-literal=SQL_PASSWORD='dL4jp2Ip7' \
  --from-literal=SQL_DBNAME=mydrivingDB
  
kubectl apply -f poi.yml --namespace api
kubectl apply -f user-java.yaml --namespace api
kubectl apply -f userprofile.yml --namespace api
kubectl apply -f trips.yml --namespace api
kubectl apply -f tripviewer.yml --namespace web


ADD EKS-Managed Azure AD
az aks update -g MyResourceGroup -n MyManagedCluster --enable-aad --aad-admin-group-object-ids <id-1> [--aad-tenant-id <id>]




curl -i -X GET 'http://localhost/api/user-java/healthcheck'


kubectl get pods --namespace api
kubectl exec -i -t --namespace=api user-java-5cf5969df-v294v sh

************************************************************************************
Challenge 3
************************************************************************************

CREATE AKS Cluster
az aks create --resource-group teamResources --name myAKSCluster --node-count 2 --enable-addons monitoring --generate-ssh-keys

INSTALL Kubectl and Connect to AKS Cluster
sudo az aks install-cli
az aks get-credentials --resource-group teamResources --name myAKSCluster

CONNECT ACR with AKS
az aks update -n myAKSCluster -g teamResources --attach-acr registryefd3942

MAKE NAMESPACE
kubectl create namespace web
kubectl create namespace api

SECRETS:
Azure SQL FDQN: sqlserverefd3942.database.windows.net
Azure SQL Server User: sqladmineFd3942
Azure SQL Server Pass: dL4jp2Ip7
Azure SQL Server Database: mydrivingDB

kubectl create secret generic sql-info --namespace api \
  --from-literal=SQL_SERVER=sqlserverefd3942.database.windows.net \
  --from-literal=SQL_USER=sqladmineFd3942 \
  --from-literal=SQL_PASSWORD='dL4jp2Ip7' \
  --from-literal=SQL_DBNAME=mydrivingDB
  
  
DEPLOY IMAGE to Cluster
kubectl apply -f poi.yml --namespace api

************************************************************************************
Challenge 2
************************************************************************************
CONTAINER INFO:
CONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                                       NAMES
cee0c2ee424f   tripinsights/poi:1.0                         "dotnet poi.dll"         9 seconds ago   Up 7 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp       poi
51a1f93b5e0f   mcr.microsoft.com/mssql/server:2017-latest   "/opt/mssql/bin/nonrâ€¦"   2 hours ago     Up 2 hours     0.0.0.0:1433->1433/tcp, :::1433->1433/tcp   sqltestdb

RUN SQL:
docker run -d --network oh-network -e ACCEPT_EULA=Y -e SA_PASSWORD=localtestpw123@ --name sqltestdb -p 1433:1433 mcr.microsoft.com/mssql/server:2017-latest

INSTALL DB:
sudo docker exec -it sqltestdb "bash"
/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P localtestpw123@
CREATE DATABASE mydrivingDB
curl -i -X GET 'http://localhost:8080/api/poi' 

RUN APPS:
docker run -d --network oh-network --name poi         -p 8080:80 -e SQL_PASSWORD=localtestpw123@ -e SQL_SERVER=sqltestdb -e SQL_USER=sa -e ASPNETCORE_ENVIRONMENT=Local tripinsights/poi:1.0
docker run -d --network oh-network --name trips       -p 8080:80 -e SQL_PASSWORD=localtestpw123@ -e SQL_SERVER=sqltestdb -e SQL_USER=sa -e ASPNETCORE_ENVIRONMENT=Local tripinsights/trips:1.0
docker run -d --network oh-network --name userprofile -p 8080:80 -e SQL_PASSWORD=localtestpw123@ -e SQL_SERVER=sqltestdb -e SQL_USER=sa                                 tripinsights/userprofile:1.0 

LOAD DATA:
docker run --network oh-network --name dataload               -e SQLFQDN=sqltestdb -e SQLUSER=sa -e SQLPASS=localtestpw123@ -e SQLDB=mydrivingDB openhack/data-load:v1

ACR BUILD:
ACR_NAME=registryefd3942
RES_GROUP=$ACR_NAME # Resource Group name
az group create --resource-group $RES_GROUP --location eastus
az acr create --resource-group $RES_GROUP --name $ACR_NAME --sku Standard --location eastus

az acr build -r registryefd3942 -t tripinsights/user-java:1.0 .







